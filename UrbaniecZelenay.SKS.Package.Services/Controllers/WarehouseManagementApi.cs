/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using UrbaniecZelenay.SKS.Package.BusinessLogic;
using UrbaniecZelenay.SKS.Package.BusinessLogic.Interfaces;
using UrbaniecZelenay.SKS.Package.Services.Attributes;
using UrbaniecZelenay.SKS.Package.Services.DTOs;
using BlWarehouse = UrbaniecZelenay.SKS.Package.BusinessLogic.Entities.Warehouse;

namespace UrbaniecZelenay.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehouseManagementApiController : ControllerBase
    {
        private readonly IWarehouseManagementLogic warehouseManagementLogic;
        private readonly IMapper mapper;
        
        public WarehouseManagementApiController(IMapper mapper)
        {
            this.warehouseManagementLogic = new WarehouseManagementLogic();
            this.mapper = mapper;
        }

        // public WarehouseManagementApiController(IMapper mapper, IWarehouseManagementLogic warehouseManagementLogic)
        // {
        //     this.mapper = mapper;
        //     this.warehouseManagementLogic = warehouseManagementLogic;
        // }

        
        /// <summary>
        /// Exports the hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        [HttpGet]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ExportWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        public virtual IActionResult ExportWarehouses()
        {
            // //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(200, default(Warehouse));
            //
            // //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(400, default(Error));
            //
            // //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(404);
            // string exampleJson = null;
            // exampleJson =
            //     "{\"hopType\": \"string\", \"code\": \"string\", \"description\": \"string\", \"processingDelayMins\": 0, \"locationName\": \"string\", \"locationCoordinates\": {\"lat\": 0, \"lon\": 0}, \"level\": 0, \"nextHops\": [{\"traveltimeMins\": 0, \"hop\": {\"hopType\": \"string\", \"code\": \"string\", \"description\": \"string\", \"processingDelayMins\": 0, \"locationName\": \"string\", \"locationCoordinates\": {\"lat\": 0, \"lon\": 0}}}]}";
            //
            // var example = exampleJson != null
            //     ? JsonConvert.DeserializeObject<Warehouse>(exampleJson)
            //     : default(Warehouse); //TODO: Change the data returned
            // return new ObjectResult(example);
            
            BlWarehouse blResult;
            try
            {
                blResult = warehouseManagementLogic.ExportWarehouses();
            }
            catch (InvalidOperationException)
            {
                return StatusCode(400, new Error
                {
                    ErrorMessage = "The operation failed due to an error."
                }); 
            }

            var svcResult = mapper.Map<Warehouse>(blResult);
            return new ObjectResult(svcResult);
        }

        /// <summary>
        /// Get a certain warehouse or truck by code
        /// </summary>
        /// <param name="code"></param>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">Warehouse id not found</response>
        [HttpGet]
        [Route("/warehouse/{code}")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouse")]
        [SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "An error occurred loading.")]
        public virtual IActionResult GetWarehouse([FromRoute] [Required] string code)
        {
            // //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(200, default(Warehouse));
            //
            // //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(400, default(Error));
            //
            // //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(404);
            // string exampleJson = null;
            // exampleJson = "{\"hopType\": \"string\", \"code\": \"string\", \"description\": \"string\", \"processingDelayMins\": 0, \"locationName\": \"string\", \"locationCoordinates\": {\"lat\": 0, \"lon\": 0}, \"level\": 0, \"nextHops\": [{\"traveltimeMins\": 0, \"hop\": {\"hopType\": \"string\", \"code\": \"string\", \"description\": \"string\", \"processingDelayMins\": 0, \"locationName\": \"string\", \"locationCoordinates\": {\"lat\": 0, \"lon\": 0}}}]}";
            //
            // var example = exampleJson != null
            //     ? JsonConvert.DeserializeObject<Warehouse>(exampleJson)
            //     : default(Warehouse); //TODO: Change the data returned
            // return new ObjectResult(example);
            
            BlWarehouse blResult;
            try
            {
                blResult = warehouseManagementLogic.GetWarehouse(code);
            }
            catch (ArgumentNullException)
            {
                return StatusCode(400, new Error
                {
                    ErrorMessage = "Code must not be null."
                }); 
            }

            var svcResult = mapper.Map<Warehouse>(blResult);
            return new ObjectResult(svcResult);
        }

        /// <summary>
        /// Imports a hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ImportWarehouses")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ImportWarehouses([FromBody] Warehouse body)
        {
            var blWarehouse = mapper.Map<BlWarehouse>(body);
            try
            {
                warehouseManagementLogic.ImportWarehouses(blWarehouse);
            }
            catch (ArgumentNullException)
            {
                return StatusCode(400, new Error
                {
                    ErrorMessage = "Warehouse body must not be null."
                });
            }
            
            return StatusCode(200);
        }
    }
}