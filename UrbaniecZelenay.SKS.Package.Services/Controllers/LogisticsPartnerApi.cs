/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using AutoMapper;
using UrbaniecZelenay.SKS.Package.BusinessLogic;
using UrbaniecZelenay.SKS.Package.BusinessLogic.Interfaces;
using UrbaniecZelenay.SKS.Package.Services.Attributes;
using UrbaniecZelenay.SKS.Package.Services.DTOs;
using BlParcel = UrbaniecZelenay.SKS.Package.BusinessLogic.Entities.Parcel;

namespace UrbaniecZelenay.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LogisticsPartnerApiController : ControllerBase
    {
        private readonly ILogisticsPartnerLogic logisticsPartnerLogic;
        private readonly IMapper mapper;
        
        public LogisticsPartnerApiController(IMapper mapper)
        {
            this.logisticsPartnerLogic = new LogisticsPartnerLogic();
            this.mapper = mapper;
        }
        
        /// <summary>
        /// Transfer an existing parcel into the system from the service of a logistics partner. 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Successfully transitioned the parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}")]
        [ValidateModelState]
        [SwaggerOperation("TransitionParcel")]
        [SwaggerResponse(statusCode: 200, type: typeof(NewParcelInfo),
            description: "Successfully transitioned the parcel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult TransitionParcel([FromBody] Parcel body,
            [FromRoute] [Required] [RegularExpression(@"^[A-Z0-9]{9}$")] string trackingId)
        {
            // if (body.Weight <= 0)
            // {
            //     return StatusCode(400, new Error
            //     {
            //         ErrorMessage = "Invalid Weight"
            //     });
            // }
            //
            // //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(200, default(NewParcelInfo));
            //
            // //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // // return StatusCode(400, default(Error));
            // string exampleJson = null;
            // exampleJson = "{\n  \"trackingId\" : \"PYJRB4HZ6\"\n}";
            //
            // var example = exampleJson != null
            //     ? JsonConvert.DeserializeObject<NewParcelInfo>(exampleJson)
            //     : default(NewParcelInfo); //TODO: Change the data returned
            // return new OkObjectResult(example);
            
            var blParcel = mapper.Map<BlParcel>(body);
            
            BlParcel blResult;
            try
            {
                blResult = logisticsPartnerLogic.TransitionParcel(blParcel, trackingId);
            }
            catch (ArgumentNullException)
            {
                return StatusCode(400, new Error
                {
                    ErrorMessage = "Invalid Payload"
                });
            }
            catch (ArgumentException ex)
            {
                return StatusCode(400, new Error
                {
                    ErrorMessage = ex.Message
                });
            }

            var svcResult = mapper.Map<NewParcelInfo>(blResult);
            return new ObjectResult(svcResult);
        }
    }
}